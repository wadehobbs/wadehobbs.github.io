---
title: "test"
format: html
editor: visual
---

The goal here is to scrape the procyclingstats site for results data. Results can be scraped for any race level and any year provided by the site.

This uses the polite package to assist in the scrape. As per the website:

"The goal of polite is to promote responsible web etiquette. The package's two main functions *bow* and *scrape* define and realize a web harvesting session. bow is used to introduce the client to the host and ask for permission to scrape (by inquiring against the host's robots.txt file), while scrape is the main function for retrieving data from the remote server.

The three pillars of a polite session are seeking permission, taking slowly and never asking twice."

This does mean the scrapes are *slow* by design. For a worked example see: https://github.com/dmi3kno/polite

# Step 1: Get a list of races you want to scrape

This section takes the years you want to scrape and the circuit, and generates a dataframe with the name of the race, the year and the link for the race.

Select the circuit:

1.  Men's World Tour
2.  Men's World Championships
3.  Men's Junior
4.  Women's Elite
5.  Women's Junior
6.  Women's World Tour
7.  Europe Tour
8.  Africa Tour
9.  Asia Tour
10. Oceania Tour
11. American Tour
12. UCI Pro Series
13. National Cup

```{r, warning=FALSE, message=FALSE, error=FALSE}
library(tidyverse)
library(rvest)
library(magrittr)
library(data.table)
library(polite)
library(xml2)
library(glue)
library(tictoc)
library(janitor)
library(lubridate)
library(Hmisc)

race_results_df <- readRDS("race_results_df") %>%
                  filter(year > 2020)
```

Now we have the results, need to have a look at it. Who had the most wins for the the period?

```{r, warning=FALSE, message=FALSE, error=FALSE, fig.width=8, fig.height= 6}
race_results_df %>%
  filter(rnk == 1, 
         year > 2020) %>%
  group_by(rider, race_type) %>%
  summarise(wins = n()) %>%
  group_by(rider) %>%
  mutate(total_wins = sum(wins)) %>%
  filter(total_wins > 2) %>%
  ggplot(aes(x = reorder(rider, total_wins), y = wins, fill = race_type)) +
  geom_bar(stat = "identity") +
  coord_flip() +
  scale_y_continuous(breaks = c(0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24)) +
  labs(x = "", fill = "Race Type")
```

Since the start of the 2021 season Pog has won the most races/stages with 18 followed closely by Van Aert with 16 and Roglic at 11. Does not include overall GC wins. Limited to those with 3 or more wins.

What does it look like if we look at who had the most 2nd places?

```{r, warning=FALSE, message=FALSE, error=FALSE, fig.width=8, fig.height= 6}
race_results_df %>%
  filter(rnk == 2, year > 2020) %>%
  group_by(rider, race_type) %>%
  summarise(second = n()) %>%
  group_by(rider) %>%
  mutate(total_seconds = sum(second)) %>%
  filter(total_seconds > 2) %>%
  ggplot(aes(x = reorder(rider, total_seconds), y = second, fill = race_type)) +
  geom_bar(stat = "identity") +
  coord_flip() +
  scale_y_continuous(breaks = c(0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24)) +
  labs(x = "")
```

Perhaps unsurprisingly, Van Aert had the most 2nd places with 13 followed closely by Roglic with 12.

Finally, if we highlight monuments and grand tours, who has the most 'big' wins. The following graph is ordered by the most total wins, but shows how many were from monuments or grand tours and how many were not.

```{r, warning=FALSE, message=FALSE, error=FALSE, fig.width=10, fig.height= 8}

one_day_race_wins <- race_results_df %>%
  filter(race_type == "one-day race", rnk == 1, year > 2020) %>%
  group_by(rider, race_level) %>%
  summarise(wins = n()) %>%
  group_by(rider) %>%
  mutate(total_wins = sum(wins)) %>%
  # filter(total_wins >2) %>%
  ggplot(aes(x = reorder(rider, total_wins), y = wins, fill = race_level)) +
  geom_col() +
  coord_flip() +
  facet_wrap(~race_level) +
  scale_y_continuous(breaks = c(0:20)) +
  labs(x = "", title = "One-Day Races", fill = "Race Level")

stage_race_wins <- race_results_df %>%
  filter(race_type == "stage race", rnk == 1, year > 2020) %>%
  group_by(rider, race_level) %>%
  summarise(wins = n()) %>%
  group_by(rider) %>%
  mutate(total_wins = sum(wins)) %>%
  filter(total_wins > 2) %>%
  ggplot(aes(x = reorder(rider, total_wins), y = wins, fill = race_level)) +
  geom_col() +
  coord_flip() +
  facet_wrap(~race_level) +
  scale_y_continuous(breaks = c(0:20)) +
  labs(x = "", title = "Stage Races", fill = "Race Level")



gridExtra::grid.arrange(stage_race_wins, one_day_race_wins)
```

Looking at One-day races, Van Aert and Pog won the same number (5 wins), but that does not tell the whole story - 3 of Pog's 5 wins were Monuments while none of Van Aert's wins were Monuments. For Stage races, looking at the sprinters, both Bennett and Cavendish had 6 wins, of those 5 of Cavendish's were at Grand Tours while Bennett only had 2 Grand Tour stage wins.

There is a lot more to do in regards to analysis, this document has focused on the data scrape. With that achieved, future posts will be more in-depth analysis of this data.

```{r, warning=FALSE, message=FALSE, error=FALSE}
Hmisc::describe(race_results_df)
```
